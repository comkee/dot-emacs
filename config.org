#+TITLE: Emacs configuration
#+AUTHOR: Steffen Fiedler

* Installation
** Personal
#+BEGIN_SRC emacs-lisp
  (load (concat user-emacs-directory "secrets.el"))
  (setq user-full-name full-name
        user-mail-address email-address)
#+END_SRC
** Package archives
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (setq package-enable-at-startup nil)
  (setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
                           ("melpa-stable" . "https://stable.melpa.org/packages/")
                           ("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")))

  (setq package-archive-priorities '(("melpa-stable" . 50)
                                     ("gnu" . 10)
                                     ("marmalade" . 10)
                                     ("melpa" . 0)))
  (unless package--initialized (package-initialize t))
  ;; bootstrap use-package (http://www.lunaryorn.com/)
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  ;; and call it?
  (eval-when-compile (require 'use-package))
  (when (not package-archive-contents)
    (package-refresh-contents))
#+END_SRC
** Package update
Keep installed packages updated and remove old versions.
#+BEGIN_SRC emacs-lisp
  ;; (use-package auto-package-update
  ;;   :config
  ;;   (setq auto-package-update-delete-old-versions t)
  ;;   (setq auto-package-update-hide-results t)
  ;;   (auto-package-update-maybe))
#+END_SRC
* Sane defaults
** Hide warnings
*** Package cl is deprecated
Emacs > 27 displays warning when `cl` is required. (see [issue](https://github.com/kiwanami/emacs-epc/issues/35))
#+BEGIN_SRC emacs-lisp
  (setq byte-compile-warnings '(cl-functions))
#+END_SRC
** Default directory
Defines user root as default directory.
#+BEGIN_SRC emacs-lisp
  (setq default-directory "~/")
#+END_SRC
** ZSH configuration
https://github.com/Wilfred/ag.el/issues/93
#+BEGIN_SRC emacs-lisp
  (setenv "PATH" (concat (getenv "PATH") ":/usr/local/bin"))
#+END_SRC
** Auto revert
When something changes a file, automatically refresh the buffer containing that file so they can’t get out of sync.
#+BEGIN_SRC emacs-lisp
  (global-auto-revert-mode t)
#+END_SRC
** Regions

#+BEGIN_SRC emacs-lisp
  ;; These functions are useful. Activate them.
  (put 'downcase-region 'disabled nil)
  (put 'upcase-region 'disabled nil)
  (put 'narrow-to-region 'disabled nil)
#+END_SRC

** dired

#+BEGIN_SRC emacs-lisp
  (put 'dired-find-alternate-file 'disabled nil)
#+END_SRC

** Stop creating backup files
Save and commit often instead of relying on emacs' automatic backup~ files.
#+BEGIN_SRC emacs-lisp
  (setq make-backup-files nil)
#+END_SRC
And disable emacs' #auto-save# files.
#+BEGIN_SRC emacs-lisp
  (setq auto-save-default nil)
#+END_SRC

** UTF-8 everywhere

#+BEGIN_SRC emacs-lisp
  (setq locale-coding-system 'utf-8) ; pretty
  (set-terminal-coding-system 'utf-8) ; pretty
  (set-keyboard-coding-system 'utf-8) ; pretty
  (set-selection-coding-system 'utf-8) ; please
  (prefer-coding-system 'utf-8) ; with sugar on top
  (setq slime-net-coding-system 'utf-8-unix)
#+END_SRC

** Indentation and tabs
Make indentation commands use space only, never tab characters
#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
#+END_SRC
Set default tab char's display width to 4 spaces.
#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 4)
#+END_SRC

** 'y' or 'n' short handles will do
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
** Replace selected with any kind of input
#+BEGIN_SRC emacs-lisp
  (delete-selection-mode 1)
#+END_SRC
** Enable systems clipboard manager interactions
#+BEGIN_SRC emacs-lisp
  (setq x-select-enable-clipboard t
        x-select-enable-primary t)
#+END_SRC
** Stop 'donking
No negative speaker feedback.
#+BEGIN_SRC emacs-lisp
  (setq visible-bell t)
#+END_SRC
** Adaptive cursor width
Make the cursor the full width of the character it is under – e.g. the full width of a TAB character (from [[http://pragmaticemacs.com/emacs/adaptive-cursor-width/][pragmatic emacs]]).
#+BEGIN_SRC emacs-lisp
  (setq x-stretch-cursor t)
#+END_SRC
* Mac defaults
#+BEGIN_SRC emacs-lisp
  (when (string-equal system-type "darwin")
    ;; Non-native fullscreen
    (setq ns-use-native-fullscreen nil)
    ;; delete files by moving them to the trash
    (setq delete-by-moving-to-trash t)
    (setq trash-directory "~/.Trash")

    ;; Don't make new frames when opening a new file with Emacs
    (setq ns-pop-up-frames nil)

    ;; set the Fn key as the hyper key
    (setq ns-function-modifier 'hyper)

    ;; Use Command-` to switch between Emacs windows (not frames)
    (bind-key "s-`" 'other-window)

    ;; Use Command-Shift-` to switch Emacs frames in reverse
    (bind-key "s-~" (lambda() () (interactive) (other-window -1)))

    ;; Because of the keybindings above, set one for `other-frame'
    (bind-key "s-1" 'other-frame)

    ;; Fullscreen!
    (setq ns-use-native-fullscreen nil) ; Not Lion style
    (bind-key "<s-return>" 'toggle-frame-fullscreen)

    ;; buffer switching
    (bind-key "s-{" 'previous-buffer)
    (bind-key "s-}" 'next-buffer)

    ;; disable the key that minimizes emacs to the dock because I don't
    ;; minimize my windows
    (global-unset-key (kbd "C-z"))

    ;; Not going to use these commands
    (put 'ns-print-buffer 'disabled t)
    (put 'suspend-frame 'disabled t))
#+END_SRC

* Navigating buffers
Switch to next window with `M-o` instead of `C-x o`.
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-o") 'other-window)
#+END_SRC
* Fonts
#+BEGIN_SRC emacs-lisp
  (when (eq system-type 'darwin)
    (set-frame-font "Menlo 14")
                                          ; Use Spotlight to search with M-x locate
    (setq locate-command "mdfind"))
#+END_SRC
* Theme
** Eigengrau
A fork of [[https://github.com/sjrmanning/noctilux-theme][Noctilux]] theme, taken from [[https://github.com/jackrusher/dotemacs/][Jack Rusher's dotemacs]].
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path (concat user-emacs-directory "eigengrau/"))
  (require 'eigengrau-theme)
#+END_SRC
Apply theme without any prompts.
#+BEGIN_SRC emacs-lisp
  (load-theme 'eigengrau t)
#+END_SRC

* Font
#+BEGIN_SRC emacs-lisp

#+END_SRC
* Cider
#+BEGIN_SRC emacs-lisp
  (use-package cider
    :ensure t
    :pin melpa-stable
    :config
    (setq nrepl-use-ssh-fallback-for-remote-hosts t))
#+END_SRC

* Company
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :defer t
    :config
    (setq company-tooltip-limit 10)
    (setq company-idle-delay 0.3)
    (setq company-echo-delay 0)
    (setq company-minimum-prefix-length 1)
    (setq company-require-match nil)
    (setq company-tooltip-flip-when-above t)
    (setq company-transformers '(company-sort-by-occurrence))
    :init (global-company-mode))
#+END_SRC

* Docker
#+BEGIN_SRC emacs-lisp
  (use-package docker
    :ensure t
    :bind ("C-c d" . docker))
#+END_SRC
* Exec-path-from-shell
#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :ensure t
    :pin melpa-stable)

  (when (memq window-system '(mac ns x))
    (exec-path-from-shell-initialize))
#+END_SRC
* Expand region
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :ensure t
    :pin melpa-stable
    :bind ("C-=" . er/expand-region))
#+END_SRC
** Keys
- expand `C-=`
- retract `C-- C-=`
* Avy
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :pin melpa-stable
    :bind
    ("C-:" . avy-goto-char))
#+END_SRC
* Ivy
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :ensure t
    :pin melpa-stable
    :config
    (ivy-mode 1)
    (setq ivy-count-format " %d/%d ")
    (setq ivy-use-virtual-buffers t)
    (setq ivy-use-selectable-prompt t)
    (setq enable-recursive-minibuffers t)
    (setq projectile-completion-system 'ivy)
    (setq magit-completing-read-function 'ivy-completing-read)
    :bind
    (:map ivy-minibuffer-map
          ("<return>" . ivy-alt-done)))
#+END_SRC
* Counsel
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :ensure t
    :pin melpa-stable
    :bind
    ("M-x" . counsel-M-x)
    ("C-x C-f" . counsel-find-file)
    ("C-c g" . counsel-git)
    ("C-x l" . counsel-locate)
    :config
    (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history))
#+END_SRC
* Swiper
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :ensure t
    :pin melpa-stable
    :bind
    ("C-s" . swiper)
    ("C-c C-r" . ivy-resume))
#+END_SRC
* Csv

[csv-mode](https://elpa.gnu.org/packages/csv-mode.html)

| Binding | Description                          |
|---------+--------------------------------------|
| C-c C-a | Aligns column width to maximum width |
| C-c C-u | Undoes alignment, to source          |

#+BEGIN_SRC emacs-lisp
  (use-package csv-mode
    :ensure t
    :pin gnu
    :init
    (setq csv-separators '("," ";" "\t"))
    (add-to-list 'auto-mode-alist '("\\.[CcTt][Ss][Vv]\\'" . csv-mode)))
#+END_SRC
* Ledger

| Binding     | Description                                      |
|-------------+--------------------------------------------------|
| M-n         | Next entry                                       |
| M-p         | Previous entry                                   |
| C-c C-s     | Sort all of the transactions in a region by date |
| C-c C-r     | Star reconciliation                              |
| C-c C-o C-r | Run report                                       |

#+BEGIN_SRC emacs-lisp
  (use-package ledger-mode
    :ensure t
    :pin melpa-stable
    :init
    (setq ledger-reconcile-default-commodity "€"))
#+END_SRC
* Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :pin melpa-stable
    :bind ("C-x g" . magit-status))
#+END_SRC

* Markdown mode
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :ensure t
    :pin melpa-stable
    :init
    (add-to-list 'auto-mode-alist '("\\.text\\'" . markdown-mode))
    (add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
    (add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode)))
#+END_SRC

* Notmuch
| Binding | Description                                                           |
|---------+-----------------------------------------------------------------------|
| C-c m   | Open notmuch globally                                                 |
| q       | Kill the current Notmuch buffer and return you to the previous buffer |
| m       | New message.                                                          |
| s       | Search interface                                                      |
|         |                                                                       |
#+BEGIN_SRC emacs-lisp
  (use-package notmuch
    :ensure t
    :pin melpa-stable
    :bind ("C-c m" . notmuch)
    :init
    (setq notmuch-saved-searches
          (quote
           ((:name "inbox" :query "tag:inbox AND -tag:sent" :key "i" :sort-order newest-first)
            (:name "sent" :query "tag:sent" :key "t" :sort-order newest-first)
            (:name "drafts" :query "tag:draft" :key "d")
            (:name "all mail" :query "*" :key "a" :sort-order newest-first))
           ))
    )
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (autoload 'notmuch "notmuch" "notmuch mail" t)
#+END_SRC
* Olivetti
#+BEGIN_SRC emacs-lisp
  (use-package olivetti
    :ensure t
    :pin melpa-stable)
#+END_SRC
* org-mode

| Binding | Description                                 |
|---------+---------------------------------------------|
| `C-c c` | Open capture menue to select template.      |
| `C-c '` | Open babel block in separate pop-up buffer. |

Define base directory for all org files.

#+BEGIN_SRC emacs-lisp
  (setq org-directory "~/Dropbox (Personal)/org/")
#+END_SRC

Org files for capturing.

#+BEGIN_SRC emacs-lisp
  (setq todo-file (expand-file-name "gtd.org" org-directory))
  (setq media-file (expand-file-name "media.org" org-directory))
  (setq memex-file (expand-file-name "memex.org" org-directory))
  (setq quote-file (expand-file-name "quote.org" org-directory))
#+END_SRC

Org mode's [[https://orgmode.org/manual/Capture-templates.html][caputre templates]] will be automatically filled with a set of [[https://orgmode.org/manual/Template-expansion.html][expansions]].

Changing todo states will invoke the option to take notes and track timestamps depending on [[https://orgmode.org/org.html#Tracking-TODO-state-changes-1][configuration]] using `@` and `!` in keyword definitions.

#+BEGIN_SRC emacs-lisp
  (use-package org
    :ensure t
    :pin org
    :init
    (setq
     ;; Enable syntax highlighting in #+BEGIN_SRC sections.
     org-src-fontify-natively t
     ;; Add log/notebook entries into :LOGBOOK: drawer.
     org-log-into-drawer t
     org-export-coding-system 'utf-8
     org-default-notes-file todo-file
     org-agenda-files '("~/Dropbox (Personal)/org/gtd.org"
                        "~/Dropbox (Personal)/org/gcal.org")
     calendar-week-start-day 1
     ;; Indent text lines that are not headlines are prefixed with
     ;; spaces to vertically align with the headline text.
     org-startup-indented t
     ;; Turn off manual indentation
     org-adapt-indentation nil
     org-indent-indentation-per-level 1
     ;; Deactivate ‘^’ and ‘_’ to be used to indicate super- and subscripts
     org-use-sub-superscripts nil
     ;; Enable refiling of subtree up to 2nd level
     org-refile-targets '((("~/Dropbox (Personal)/org/gtd.org") :maxlevel . 2))
     ;; Use node names instead of their path
     org-refile-use-outline-path nil
     ;; Allow `a.`, `A.`, `a)` and `A)` list style
     org-list-allow-alphabetical t
     ;; Don’t ask every time when executing a code block.
     org-confirm-babel-evaluate nil
     ;; Remove clutter form agenda view
     org-agenda-skip-scheduled-if-done t
     org-agenda-skip-deadline-if-done t
     org-src-tab-acts-natively t)
    ;; Sync Google Calendar
    ;;(add-hook 'org-agenda-mode-hook (lambda () (org-gcal-sync) ))
    ;;(add-hook 'org-capture-after-finalize-hook (lambda () (org-gcal-sync) ))
    (setq org-capture-templates
          '(("t" "Todo" entry
             (file+headline todo-file "Inbox")
             "* TODO %^{Title}\n%?\n:LOGBOOK:\n- Added: %U\n:END:")
            ("f" "Todo from file" entry
             (file+headline todo-file "Inbox")
             "* TODO %^{Title}\n%?\n:PROPERTIES:\n- File: [[%F][%f]]\n:END:\n:LOGBOOK:\n- Added: %U\n:END:")
            ("r" "Toread article" entry
             (file+headline media-file "Reading")
             "* SOMEDAY %^{Title} :READING:\n:PROPERTIES:\n:SOURCE: %^{Source}\n:END:\n:LOGBOOK:\n- Added: %U\n:END:")
            ("b" "Toread book" entry
             (file+headline media-file "Reading")
             "* SOMEDAY %^{Title} :READING:\n:PROPERTIES:\n:AUTHOR: %^{Author}\n:SOURCE: %^{Source}\n:END:\n:LOGBOOK:\n- Added: %U\n:END:")
            ("m" "Memex" entry
             (file memex-file)
             "* %^{Title}\n%?")
            ("q" "Quote" entry
             (file quote-file)
             "* %^{Quote}\n:PROPERTIES:\:AUTHOR: %^{Author}\:SOURCE: %^{Source}\:PAGE: %^{Page}\:END:\:LOGBOOK:\n- Added: %U\n:END:")
            )
          )
    (setq org-todo-keywords
          '((sequence "TODO(t!)" "NEXT(n!)" "|" "DONE(d@/!)")
            (sequence "WAITING(w@)" "SOMEDAY(s!)" "|")
            (sequence "|" "CANCELLED(c@)"))
          )
    :bind
    (("C-c a" . org-agenda)
     ("C-c c" . org-capture)))
#+END_SRC

To render todays time tracking stats recorded using clock-in and clock-out.

#+BEGIN_SRC org
  ,#+BEGIN: clocktable :scope file :maxlevel 2 :block today
  ,#+END:
#+END_SRC
* Paredit
#+BEGIN_SRC emacs-lisp
  (use-package paredit
    :ensure t
    :pin melpa-stable
    :config
    (add-hook 'prog-mode-hook #'enable-paredit-mode))
#+END_SRC

* Projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :pin melpa-stable
    :config
    (projectile-global-mode))
#+END_SRC

* Python
#+BEGIN_SRC emacs-lisp
  (use-package python
    :ensure t
    :config
    (setq python-shell-interpreter "python3")
    (setenv "PYTHONIOENCODING" "utf-8")
    (setenv "LANG" "en_US.UTF-8"))
#+END_SRC
* Rainbow delimiters
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :pin melpa-stable
    :config
    (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
#+END_SRC
* Rainbow mode
Sets background color to strings that match color names, e.g. #0000ff red rgb(100,20,0).
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :pin gnu
    :config
    (add-hook 'prog-mode-hook 'rainbow-mode))
#+END_SRC
* Restclient
#+BEGIN_SRC emacs-lisp
  (use-package restclient
    :ensure t
    :pin melpa
    :mode (("\\.http\\'" . restclient-mode))
    :bind (:map restclient-mode-map
                ("C-c C-f" . json-mode-beautify)))
#+END_SRC
* SMEX
#+BEGIN_SRC emacs-lisp
  (use-package smex
    :ensure t
    :pin melpa-stable)
#+END_SRC
* Svelte
#+BEGIN_SRC emacs-lisp
  (use-package svelte-mode
    :ensure t
    :pin melpa)
#+END_SRC
* Writing
** Single space after periods
#+BEGIN_SRC emacs-lisp
  (setq sentence-end-double-space nil)
#+END_SRC
** Remove dangling whitespaces
When saving delete all trailing whitespaces.
#+BEGIN_SRC emacs-lisp
  (add-hook 'write-file-hooks 'delete-trailing-whitespace)
#+END_SRC
* Customize
#+BEGIN_SRC emacs-lisp
  ;; Customize interface to safe config in separate file
  (setq custom-file (concat user-emacs-directory "custom.el"))
  (load custom-file)
#+END_SRC
